AWSTemplateFormatVersion: "2010-09-09"
Description: Create VPC with public & private subnets, route tables, security groups, a t2.micro EC2, Internet-facing ALB (HTTP → 8080) and MySQL RDS

Parameters:
  Prefix:
    Type: String
    Default: cfn-lab
    Description: "Prefix for resource names"

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Default: "key-test"

  AmiId:
    Type: AWS::EC2::Image::Id
    Description: AMI for Amazon Linux 2023 (x86_64)
    Default: ami-05206bf8aecfc7ae6

  InstanceType:
    Type: String
    Default: t2.micro

  DbUser:
    Type: String
    Default: root
    Description: "RDS master user name"

  DbPassword:
    Type: String
    NoEcho: true
    Description: "RDS master password"

  AlertEmail:
    Type: String
    Default: "you@example.com"

# ────────────────────────────────────────────────────────────
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-igw"

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets ---------------------------------------------------
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/20
      AvailabilityZone: ap-northeast-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-public-a"

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.128.0/20
      AvailabilityZone: ap-northeast-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-private-a"

  PublicRTB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-public-rtb"

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRTB
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  AssocPublicSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRTB

  PrivateRTB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-private-rtb"

  AssocPrivateSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRTB

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.16.0/20
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-public-c"

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.144.0/20
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-private-c"

  AssocPublicSubnetC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRTB

  AssocPrivateSubnetC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRTB

  # ──────────────  RDS Subnet  ──────────────
  RdsSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.32.0/25
      AvailabilityZone: ap-northeast-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: rds-pvt-subnet-1

  RdsSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.33.0/25
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: rds-pvt-subnet-2

  RdsSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.32.128/25
      AvailabilityZone: ap-northeast-1d
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: rds-pvt-subnet-3

  RdsRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: rds-pvt-rt

  AssocRdsSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref RdsSubnetA
      RouteTableId: !Ref RdsRouteTable

  AssocRdsSubnetC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref RdsSubnetC
      RouteTableId: !Ref RdsRouteTable

  AssocRdsSubnetD:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref RdsSubnetD
      RouteTableId: !Ref RdsRouteTable

  RdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "RDS private subnets (3AZ)"
      SubnetIds:
        - !Ref RdsSubnetA
        - !Ref RdsSubnetC
        - !Ref RdsSubnetD
      Tags:
        - Key: Name
          Value: rds-pvt-subnet-group

  # Security Group ------------------------------------------
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from the Internet to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort:   80
          CidrIp:   0.0.0.0/0
      Tags:
        - Key: Name
          Value: cfn-lab-alb-sg

  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from admin IP and HTTP (8080) only from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort:   22
          CidrIp:   217.105.35.85/32
        - IpProtocol: tcp
          FromPort: 8080
          ToPort:   8080
          SourceSecurityGroupId: !Ref ALBSG
      Tags:
        - Key: Name
          Value: cfn-lab-ec2-sg

  # EC2 Instance -------------------------------------------
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId:      !Ref AmiId
      KeyName:      !Ref KeyName
      SubnetId:     !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref EC2SG
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-ec2"
        - Key: Environment
          Value: lab
        - Key: Project
          Value: !Ref Prefix

  # ALB ------------------------------------------------------
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetGroupName: !Sub "${Prefix}-tg"
      TargetType: instance
      Protocol: HTTP
      Port: 8080
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref EC2Instance
          Port: 8080
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckPath: /
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-tg"

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Prefix}-alb"
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetC
      SecurityGroups:
        - !Ref ALBSG
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: false

  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  # RDS Instance -------------------------------------------
  RdsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL from EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:   3306
          ToPort:     3306
          SourceSecurityGroupId: !Ref EC2SG
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-rds-sg"

  MyDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      Engine: mysql
      EngineVersion: 8.0.39
      DBInstanceClass: db.t4g.micro
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref RdsSubnetGroup
      VPCSecurityGroups:
        - !Ref RdsSG
      MasterUsername: !Ref DbUser
      MasterUserPassword: !Ref DbPassword
      BackupRetentionPeriod: 0
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp2
      DeletionProtection: false
      DBInstanceIdentifier: !Sub "${Prefix}-mysql"

  # CloudWatch Alarm + SNS --------------------------------
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Prefix}-alert-topic"
      Subscription:
        - Endpoint: !Ref AlertEmail
          Protocol: email
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-alert-topic"

  EC2CPUUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Prefix}-cpu-alarm"
      AlarmDescription: "EC2 CPUUtilization がしきい値を超えました。"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance
      Statistic: Average
      Period: 60
      Threshold: 1 # for an alert test
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: breaching
      ActionsEnabled: true
      AlarmActions:
        - !Ref NotificationTopic
      OKActions:
        - !Ref NotificationTopic

  # WAF ------------------------------------------------------
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub "${Prefix}-webacl"
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub "${Prefix}-webacl"
      Rules:
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 1
          Statement:
            ManagedRuleGroupStatement:
              Name: AWSManagedRulesCommonRuleSet
              VendorName: AWS
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesCommonRuleSet

  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      WebACLArn: !GetAtt WebACL.Arn
      ResourceArn: !Ref MyLoadBalancer
